name: Build

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - config/overlays/dev/kustomization.yaml
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:          
      - name: Checkout
        uses: actions/checkout@v3
      - name: "SetUp Go"
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: "SetUp Go cache"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build
        run: |
          make test
  publish:
    name: Publish
    needs:
    - build
    runs-on: ubuntu-latest
    outputs:
      imageName: ${{ steps.publish.outputs.image_name }}
      imageSha: ${{ steps.publish.outputs.image_sha }}
    steps:          
      - name: Checkout
        uses: actions/checkout@v3
      - name: SetUp GO
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
      - name: Publish
        id: publish
        run: |
          IMAGE=$(make image/publish -s)
          
          IMAGE_NAME=$(echo $IMAGE | cut -d '@' -f 1)
          IMAGE_SHA=$(echo $IMAGE | cut -d ':' -f 2)
                    
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image_sha=$IMAGE_SHA" >> $GITHUB_OUTPUT

  pr:
    name: PR
    needs:
      - publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: PR
        env:
          IMAGE_NAME: ${{ needs.publish.outputs.imageName }}
          IMAGE_SHA: ${{ needs.publish.outputs.imageSha }}
        run: |
          echo ""
          echo "image name : ${IMAGE_NAME}"
          echo "image sha  : ${IMAGE_SHA}"
          echo ""

          yq -i 'del(.images[1].newTag)' config/overlays/dev/kustomization.yaml
          yq -i '.images[1].digest = strenv(IMAGE_SHA)' config/overlays/dev/kustomization.yaml
      - name: Create Pull Request
        env:
          IMAGE_NAME: ${{ needs.publish.outputs.imageName }}
          IMAGE_SHA: ${{ needs.publish.outputs.imageSha }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BRANCH_NAME: cos-fleetshard-images-${{ needs.publish.outputs.imageSha }}
        run: |
          
          git status 

          if [ -z "$(git status --untracked-files=no --porcelain config/overlays/dev/kustomization.yaml)" ]; then
            echo "Working directory clean excluding untracked files"
          else

            git config user.email "noreply@github.com"
            git config user.name "${{ github.actor }}"
            git checkout -b ${BRANCH_NAME}

            git commit -am "Update cos-fleetshard images to ${IMAGE_NAME}@sha256:${IMAGE_SHA}"

            git reset --hard
            git push -u origin ${BRANCH_NAME}

            sleep 5

            gh pr create \
              --fill \
              --base main \
              --title "chore(kustomize): update cos-fleetshard images to ${IMAGE_NAME}@sha256:${IMAGE_SHA}" \
              --body "${IMAGE_NAME}@sha256:${IMAGE_SHA}"
          fi

