/*
Connector Service Fleet Manager Private APIs

Connector Service Fleet Manager apis that are used by internal services.

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package controlplane

import (
	"encoding/json"
)

// ConnectorOperator identifies an operator that runs on the fleet shards used to manage connectors.
type ConnectorOperator struct {
	// the id of the operator
	Id *string `json:"id,omitempty"`
	// the type of the operator
	Type *string `json:"type,omitempty"`
	// the version of the operator
	Version *string `json:"version,omitempty"`
}

// NewConnectorOperator instantiates a new ConnectorOperator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorOperator() *ConnectorOperator {
	this := ConnectorOperator{}
	return &this
}

// NewConnectorOperatorWithDefaults instantiates a new ConnectorOperator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorOperatorWithDefaults() *ConnectorOperator {
	this := ConnectorOperator{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectorOperator) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorOperator) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectorOperator) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConnectorOperator) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectorOperator) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorOperator) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectorOperator) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConnectorOperator) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ConnectorOperator) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorOperator) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ConnectorOperator) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ConnectorOperator) SetVersion(v string) {
	o.Version = &v
}

func (o ConnectorOperator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorOperator struct {
	value *ConnectorOperator
	isSet bool
}

func (v NullableConnectorOperator) Get() *ConnectorOperator {
	return v.value
}

func (v *NullableConnectorOperator) Set(val *ConnectorOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorOperator(val *ConnectorOperator) *NullableConnectorOperator {
	return &NullableConnectorOperator{value: val, isSet: true}
}

func (v NullableConnectorOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
