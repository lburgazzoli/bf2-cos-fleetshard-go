/*
Connector Service Fleet Manager Private APIs

Connector Service Fleet Manager apis that are used by internal services.

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package controlplane

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// ConnectorClustersAgentApiService ConnectorClustersAgentApi service
type ConnectorClustersAgentApiService service

type ApiGetClusterAsignedConnectorDeploymentByIdRequest struct {
	ctx                context.Context
	ApiService         *ConnectorClustersAgentApiService
	connectorClusterId string
	deploymentId       string
}

func (r ApiGetClusterAsignedConnectorDeploymentByIdRequest) Execute() (*ConnectorDeployment, *http.Response, error) {
	return r.ApiService.GetClusterAsignedConnectorDeploymentByIdExecute(r)
}

/*
GetClusterAsignedConnectorDeploymentById Returns a list of connector deployments assigned to the cluster.

Returns a list of connector deployments assigned to the cluster.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param connectorClusterId The id of the connector cluster
	@param deploymentId The id of the deployment
	@return ApiGetClusterAsignedConnectorDeploymentByIdRequest
*/
func (a *ConnectorClustersAgentApiService) GetClusterAsignedConnectorDeploymentById(ctx context.Context, connectorClusterId string, deploymentId string) ApiGetClusterAsignedConnectorDeploymentByIdRequest {
	return ApiGetClusterAsignedConnectorDeploymentByIdRequest{
		ApiService:         a,
		ctx:                ctx,
		connectorClusterId: connectorClusterId,
		deploymentId:       deploymentId,
	}
}

// Execute executes the request
//
//	@return ConnectorDeployment
func (a *ConnectorClustersAgentApiService) GetClusterAsignedConnectorDeploymentByIdExecute(r ApiGetClusterAsignedConnectorDeploymentByIdRequest) (*ConnectorDeployment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConnectorDeployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersAgentApiService.GetClusterAsignedConnectorDeploymentById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/agent/kafka_connector_clusters/{connector_cluster_id}/deployments/{deployment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", url.PathEscape(parameterToString(r.connectorClusterId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deployment_id"+"}", url.PathEscape(parameterToString(r.deploymentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 410 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetClusterAsignedConnectorDeploymentsRequest struct {
	ctx                context.Context
	ApiService         *ConnectorClustersAgentApiService
	connectorClusterId string
	page               *string
	size               *string
	gtVersion          *int64
	watch              *string
}

// Page index
func (r ApiGetClusterAsignedConnectorDeploymentsRequest) Page(page string) ApiGetClusterAsignedConnectorDeploymentsRequest {
	r.page = &page
	return r
}

// Number of items in each page
func (r ApiGetClusterAsignedConnectorDeploymentsRequest) Size(size string) ApiGetClusterAsignedConnectorDeploymentsRequest {
	r.size = &size
	return r
}

// filters the connectors to those with a version greater than the given value
func (r ApiGetClusterAsignedConnectorDeploymentsRequest) GtVersion(gtVersion int64) ApiGetClusterAsignedConnectorDeploymentsRequest {
	r.gtVersion = &gtVersion
	return r
}

// watch for changes to the resources and return them as a stream of watch events. Specify gt_version to specify the starting point.
func (r ApiGetClusterAsignedConnectorDeploymentsRequest) Watch(watch string) ApiGetClusterAsignedConnectorDeploymentsRequest {
	r.watch = &watch
	return r
}

func (r ApiGetClusterAsignedConnectorDeploymentsRequest) Execute() (*ConnectorDeploymentList, *http.Response, error) {
	return r.ApiService.GetClusterAsignedConnectorDeploymentsExecute(r)
}

/*
GetClusterAsignedConnectorDeployments Returns a list of connector deployments assigned to the cluster.

Returns a list of connector deployments assigned to the cluster.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param connectorClusterId The id of the connector cluster
	@return ApiGetClusterAsignedConnectorDeploymentsRequest
*/
func (a *ConnectorClustersAgentApiService) GetClusterAsignedConnectorDeployments(ctx context.Context, connectorClusterId string) ApiGetClusterAsignedConnectorDeploymentsRequest {
	return ApiGetClusterAsignedConnectorDeploymentsRequest{
		ApiService:         a,
		ctx:                ctx,
		connectorClusterId: connectorClusterId,
	}
}

// Execute executes the request
//
//	@return ConnectorDeploymentList
func (a *ConnectorClustersAgentApiService) GetClusterAsignedConnectorDeploymentsExecute(r ApiGetClusterAsignedConnectorDeploymentsRequest) (*ConnectorDeploymentList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConnectorDeploymentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersAgentApiService.GetClusterAsignedConnectorDeployments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/agent/kafka_connector_clusters/{connector_cluster_id}/deployments"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", url.PathEscape(parameterToString(r.connectorClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.gtVersion != nil {
		localVarQueryParams.Add("gt_version", parameterToString(*r.gtVersion, ""))
	}
	if r.watch != nil {
		localVarQueryParams.Add("watch", parameterToString(*r.watch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetClusterAsignedConnectorNamespaceByIdRequest struct {
	ctx                context.Context
	ApiService         *ConnectorClustersAgentApiService
	connectorClusterId string
	namespaceId        string
}

func (r ApiGetClusterAsignedConnectorNamespaceByIdRequest) Execute() (*ConnectorNamespaceDeployment, *http.Response, error) {
	return r.ApiService.GetClusterAsignedConnectorNamespaceByIdExecute(r)
}

/*
GetClusterAsignedConnectorNamespaceById Returns a connector namespace assigned to the cluster.

Returns a connector namespace assigned to the cluster.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param connectorClusterId The id of the connector cluster
	@param namespaceId The id of the namespace
	@return ApiGetClusterAsignedConnectorNamespaceByIdRequest
*/
func (a *ConnectorClustersAgentApiService) GetClusterAsignedConnectorNamespaceById(ctx context.Context, connectorClusterId string, namespaceId string) ApiGetClusterAsignedConnectorNamespaceByIdRequest {
	return ApiGetClusterAsignedConnectorNamespaceByIdRequest{
		ApiService:         a,
		ctx:                ctx,
		connectorClusterId: connectorClusterId,
		namespaceId:        namespaceId,
	}
}

// Execute executes the request
//
//	@return ConnectorNamespaceDeployment
func (a *ConnectorClustersAgentApiService) GetClusterAsignedConnectorNamespaceByIdExecute(r ApiGetClusterAsignedConnectorNamespaceByIdRequest) (*ConnectorNamespaceDeployment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConnectorNamespaceDeployment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersAgentApiService.GetClusterAsignedConnectorNamespaceById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/agent/kafka_connector_clusters/{connector_cluster_id}/namespaces/{namespace_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", url.PathEscape(parameterToString(r.connectorClusterId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace_id"+"}", url.PathEscape(parameterToString(r.namespaceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 410 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetClusterAsignedConnectorNamespacesRequest struct {
	ctx                context.Context
	ApiService         *ConnectorClustersAgentApiService
	connectorClusterId string
	page               *string
	size               *string
	gtVersion          *int64
}

// Page index
func (r ApiGetClusterAsignedConnectorNamespacesRequest) Page(page string) ApiGetClusterAsignedConnectorNamespacesRequest {
	r.page = &page
	return r
}

// Number of items in each page
func (r ApiGetClusterAsignedConnectorNamespacesRequest) Size(size string) ApiGetClusterAsignedConnectorNamespacesRequest {
	r.size = &size
	return r
}

// filters the connectors to those with a version greater than the given value
func (r ApiGetClusterAsignedConnectorNamespacesRequest) GtVersion(gtVersion int64) ApiGetClusterAsignedConnectorNamespacesRequest {
	r.gtVersion = &gtVersion
	return r
}

func (r ApiGetClusterAsignedConnectorNamespacesRequest) Execute() (*ConnectorNamespaceDeploymentList, *http.Response, error) {
	return r.ApiService.GetClusterAsignedConnectorNamespacesExecute(r)
}

/*
GetClusterAsignedConnectorNamespaces Returns all connector namespaces assigned to the cluster.

Returns all connector namespaces assigned to the cluster.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param connectorClusterId The id of the connector cluster
	@return ApiGetClusterAsignedConnectorNamespacesRequest
*/
func (a *ConnectorClustersAgentApiService) GetClusterAsignedConnectorNamespaces(ctx context.Context, connectorClusterId string) ApiGetClusterAsignedConnectorNamespacesRequest {
	return ApiGetClusterAsignedConnectorNamespacesRequest{
		ApiService:         a,
		ctx:                ctx,
		connectorClusterId: connectorClusterId,
	}
}

// Execute executes the request
//
//	@return ConnectorNamespaceDeploymentList
func (a *ConnectorClustersAgentApiService) GetClusterAsignedConnectorNamespacesExecute(r ApiGetClusterAsignedConnectorNamespacesRequest) (*ConnectorNamespaceDeploymentList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConnectorNamespaceDeploymentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersAgentApiService.GetClusterAsignedConnectorNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/agent/kafka_connector_clusters/{connector_cluster_id}/namespaces"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", url.PathEscape(parameterToString(r.connectorClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.gtVersion != nil {
		localVarQueryParams.Add("gt_version", parameterToString(*r.gtVersion, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 410 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateConnectorDeploymentStatusRequest struct {
	ctx                       context.Context
	ApiService                *ConnectorClustersAgentApiService
	connectorClusterId        string
	deploymentId              string
	connectorDeploymentStatus *ConnectorDeploymentStatus
}

func (r ApiUpdateConnectorDeploymentStatusRequest) ConnectorDeploymentStatus(connectorDeploymentStatus ConnectorDeploymentStatus) ApiUpdateConnectorDeploymentStatusRequest {
	r.connectorDeploymentStatus = &connectorDeploymentStatus
	return r
}

func (r ApiUpdateConnectorDeploymentStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateConnectorDeploymentStatusExecute(r)
}

/*
UpdateConnectorDeploymentStatus update the connector deployment status

update the connector deployment status

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param connectorClusterId The id of the connector cluster
	@param deploymentId The id of the deployment
	@return ApiUpdateConnectorDeploymentStatusRequest
*/
func (a *ConnectorClustersAgentApiService) UpdateConnectorDeploymentStatus(ctx context.Context, connectorClusterId string, deploymentId string) ApiUpdateConnectorDeploymentStatusRequest {
	return ApiUpdateConnectorDeploymentStatusRequest{
		ApiService:         a,
		ctx:                ctx,
		connectorClusterId: connectorClusterId,
		deploymentId:       deploymentId,
	}
}

// Execute executes the request
func (a *ConnectorClustersAgentApiService) UpdateConnectorDeploymentStatusExecute(r ApiUpdateConnectorDeploymentStatusRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersAgentApiService.UpdateConnectorDeploymentStatus")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/agent/kafka_connector_clusters/{connector_cluster_id}/deployments/{deployment_id}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", url.PathEscape(parameterToString(r.connectorClusterId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deployment_id"+"}", url.PathEscape(parameterToString(r.deploymentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.connectorDeploymentStatus == nil {
		return nil, reportError("connectorDeploymentStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectorDeploymentStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 410 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateConnectorNamespaceStatusRequest struct {
	ctx                                context.Context
	ApiService                         *ConnectorClustersAgentApiService
	connectorClusterId                 string
	namespaceId                        string
	connectorNamespaceDeploymentStatus *ConnectorNamespaceDeploymentStatus
}

func (r ApiUpdateConnectorNamespaceStatusRequest) ConnectorNamespaceDeploymentStatus(connectorNamespaceDeploymentStatus ConnectorNamespaceDeploymentStatus) ApiUpdateConnectorNamespaceStatusRequest {
	r.connectorNamespaceDeploymentStatus = &connectorNamespaceDeploymentStatus
	return r
}

func (r ApiUpdateConnectorNamespaceStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateConnectorNamespaceStatusExecute(r)
}

/*
UpdateConnectorNamespaceStatus update the connector namespace status

update the connector namespace status

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param connectorClusterId The id of the connector cluster
	@param namespaceId The id of the namespace
	@return ApiUpdateConnectorNamespaceStatusRequest
*/
func (a *ConnectorClustersAgentApiService) UpdateConnectorNamespaceStatus(ctx context.Context, connectorClusterId string, namespaceId string) ApiUpdateConnectorNamespaceStatusRequest {
	return ApiUpdateConnectorNamespaceStatusRequest{
		ApiService:         a,
		ctx:                ctx,
		connectorClusterId: connectorClusterId,
		namespaceId:        namespaceId,
	}
}

// Execute executes the request
func (a *ConnectorClustersAgentApiService) UpdateConnectorNamespaceStatusExecute(r ApiUpdateConnectorNamespaceStatusRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersAgentApiService.UpdateConnectorNamespaceStatus")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/agent/kafka_connector_clusters/{connector_cluster_id}/namespaces/{namespace_id}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", url.PathEscape(parameterToString(r.connectorClusterId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace_id"+"}", url.PathEscape(parameterToString(r.namespaceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.connectorNamespaceDeploymentStatus == nil {
		return nil, reportError("connectorNamespaceDeploymentStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectorNamespaceDeploymentStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 410 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateKafkaConnectorClusterStatusRequest struct {
	ctx                    context.Context
	ApiService             *ConnectorClustersAgentApiService
	connectorClusterId     string
	connectorClusterStatus *ConnectorClusterStatus
}

// Cluster status update data
func (r ApiUpdateKafkaConnectorClusterStatusRequest) ConnectorClusterStatus(connectorClusterStatus ConnectorClusterStatus) ApiUpdateKafkaConnectorClusterStatusRequest {
	r.connectorClusterStatus = &connectorClusterStatus
	return r
}

func (r ApiUpdateKafkaConnectorClusterStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateKafkaConnectorClusterStatusExecute(r)
}

/*
UpdateKafkaConnectorClusterStatus Update the status of a connector cluster

Update the status of a connector cluster

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param connectorClusterId The id of the connector cluster
	@return ApiUpdateKafkaConnectorClusterStatusRequest
*/
func (a *ConnectorClustersAgentApiService) UpdateKafkaConnectorClusterStatus(ctx context.Context, connectorClusterId string) ApiUpdateKafkaConnectorClusterStatusRequest {
	return ApiUpdateKafkaConnectorClusterStatusRequest{
		ApiService:         a,
		ctx:                ctx,
		connectorClusterId: connectorClusterId,
	}
}

// Execute executes the request
func (a *ConnectorClustersAgentApiService) UpdateKafkaConnectorClusterStatusExecute(r ApiUpdateKafkaConnectorClusterStatusRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersAgentApiService.UpdateKafkaConnectorClusterStatus")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/agent/kafka_connector_clusters/{connector_cluster_id}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", url.PathEscape(parameterToString(r.connectorClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.connectorClusterStatus == nil {
		return nil, reportError("connectorClusterStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectorClusterStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
