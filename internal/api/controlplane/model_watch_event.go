/*
Connector Service Fleet Manager Private APIs

Connector Service Fleet Manager apis that are used by internal services.

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package controlplane

import (
	"encoding/json"
)

// WatchEvent struct for WatchEvent
type WatchEvent struct {
	Type   string                 `json:"type"`
	Error  NullableError          `json:"error,omitempty"`
	Object map[string]interface{} `json:"object,omitempty"`
}

// NewWatchEvent instantiates a new WatchEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchEvent(type_ string) *WatchEvent {
	this := WatchEvent{}
	this.Type = type_
	return &this
}

// NewWatchEventWithDefaults instantiates a new WatchEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchEventWithDefaults() *WatchEvent {
	this := WatchEvent{}
	return &this
}

// GetType returns the Type field value
func (o *WatchEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WatchEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WatchEvent) SetType(v string) {
	o.Type = v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WatchEvent) GetError() Error {
	if o == nil || isNil(o.Error.Get()) {
		var ret Error
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WatchEvent) GetErrorOk() (*Error, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *WatchEvent) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableError and assigns it to the Error field.
func (o *WatchEvent) SetError(v Error) {
	o.Error.Set(&v)
}

// SetErrorNil sets the value for Error to be an explicit nil
func (o *WatchEvent) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *WatchEvent) UnsetError() {
	o.Error.Unset()
}

// GetObject returns the Object field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WatchEvent) GetObject() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WatchEvent) GetObjectOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Object) {
		return map[string]interface{}{}, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *WatchEvent) HasObject() bool {
	if o != nil && isNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given map[string]interface{} and assigns it to the Object field.
func (o *WatchEvent) SetObject(v map[string]interface{}) {
	o.Object = v
}

func (o WatchEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	return json.Marshal(toSerialize)
}

type NullableWatchEvent struct {
	value *WatchEvent
	isSet bool
}

func (v NullableWatchEvent) Get() *WatchEvent {
	return v.value
}

func (v *NullableWatchEvent) Set(val *WatchEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchEvent(val *WatchEvent) *NullableWatchEvent {
	return &NullableWatchEvent{value: val, isSet: true}
}

func (v NullableWatchEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
